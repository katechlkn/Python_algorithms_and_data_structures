"""
1. Подсчитать, сколько было выделено памяти под переменные в ранее разработанных
программах в рамках первых трех уроков. Проанализировать результат и определить программы
с наиболее эффективным использованием памяти.
Примечание: Для анализа возьмите любые 1-3 ваших программы или несколько вариантов кода для
одной и той же задачи. Результаты анализа вставьте в виде комментариев к коду.
Также укажите в комментариях версию Python и разрядность вашей ОС.
"""

#Версия python
# python3 --version
# Python 3.9.5

# Разрядность ОС
# uname -a
# .../RELEASE_ARM64_T8101 arm64


import sys

def memory_count(lst):
    memory = 0
    for var in lst:
        print('***********')
        print(f'Переменная: {var}')
        print('Занимает места: ', sys.getsizeof(var))
        spam = sys.getsizeof(var)
        if hasattr(var, '__iter__') and not isinstance(var, str):
            if hasattr(var, 'keys'):
                for key, value in var.items():
                    print(f'\nКлюч: \'{key}\' значение {value}')
                    spam += memory_count([key]) + memory_count([value])
            else:
                spam += memory_count(var)
        memory += spam
    return memory

#1_1. Найти сумму и произведение цифр трехзначного числа, которое вводит пользователь.
# n = int(input('Введите трехзначное число: '))
# n1 = n % 10
# n2 = n % 100 // 10
# n3 = n // 100
# print("Сумма:", n1 + n2 + n3)
# print("Произведение:", n1 * n2 * n3)
#
# Затраты памяти программы:  112
# Переменные:  [444, 4, 4, 4]

# ***************************************************************************************************
#3_8. Матрица 5x4 заполняется вводом с клавиатуры кроме последних элементов строк.
#Программа должна вычислять сумму введенных элементов каждой строки и записывать ее
#в последнюю ячейку строки. В конце следует вывести полученную матрицу.

# a = []
# for i in range(4):
#     a.append([])
#     summ = 0
#     for j in range(4):
#         b = (int(input(f'Введите элемент {i+1} и {j+1} столбца: ')))
#         a[i].append(b)
#         summ += b
#     a[i].append(summ)
# for k in a:
#     print(('{:>5d}' * 5).format(*k))

# Затраты памяти программы:  1522
# Переменные:  [[[1, 2, 3, 4, 10], [5, 6, 5, 4, 20], [7, 8, 9, 3, 27], [4, 5, 7, 2, 18]], 2, 'i', 3, [4, 5, 7, 2, 18], 18]

# ***************************************************************************************************
# 2_4. Найти сумму n элементов следующего ряда чисел: 1 -0.5 0.25 -0.125 ...Количество элементов (n) вводится с клавиатуры.

a = int(input('Введите количество элементов: '))
b = -2
def rec(x, y):
    y /= -2
    if x == 1:
        return y
    return y + rec(x - 1, y)
print(f'Сумма элементов ряда чисел: {rec(a, b)}')

# Затраты памяти программы:  56
# Переменные:  [4, -2]

# ВЫВОД: Понятно, что количество потребляемой памяти в первую очередь зависит от объема входных данных, но кроме этого на память
# влияют и количество и тип используемых переменных.

# ***************************************************************************************************
# собираем переменные для подсчета затрачиваемой памяти
_variable = []
for i in dir():
    if i[0] != '_' and not hasattr(locals()[i], '__name__'):
        _variable.append(locals()[i])

print('\nПеременные: ', _variable, '\n')
print('\nЗатраты памяти программы: ', memory_count(_variable))